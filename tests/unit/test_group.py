"""Test group features."""

import re

import pytest
from filefinder.format import Format
from filefinder.group import Group, GroupParseError
from hypothesis import example, given
from hypothesis import strategies as st
from util import StFormat, StGroup, StructGroup


def assert_grp(spec: str, expected_rgx: str, expected_fmt: str):
    grp = Group(spec, 0)
    assert grp.get_regex() == expected_rgx
    assert grp.fmt.fmt == expected_fmt


# Strategies for generating group definitions
alphabet = st.characters(exclude_characters=["(", ")", ":", "\n"])

st_format_s = StFormat.format(kind="s", safe=True).map(lambda f: f.fmt)
st_format_d = StFormat.format(kind="d", safe=True).map(lambda f: f.fmt)
st_format_f = StFormat.format(kind="ef", safe=True).map(lambda f: f.fmt)


@given(struct=StGroup.group())
def test_random_definitions(struct: StructGroup):
    """Test definitions generated by hypothesis."""
    g = Group(struct.definition, 0)

    assert g.name == struct.name

    # Test flags
    assert g.optional == struct.opt
    assert g.discard == struct.discard

    # Test rgx, format
    if "rgx" in struct:
        assert g.rgx == struct.rgx

        rgx = f"({struct.rgx})"
        if struct.opt:
            rgx += "?"
        assert g.get_regex() == rgx

    if "fmt" in struct:
        assert g.fmt.fmt == struct.fmt

    if "bool" in struct and "rgx" not in struct:
        assert struct.bool_elts is not None
        a, b = struct.bool_elts
        assert g.options == (a, b)
        assert g.rgx == f"{a}|{b}"


@given(ab=StGroup.bool_elts())
@example(ab=("foo", ""))
def test_bool(ab):
    """Test bool spec generated by hypothesis."""
    a, b = ab
    grp = Group(f"name:bool={a}:{b}", 0)
    assert grp.rgx == f"{a}|{b}"

    grp = Group(f"name:bool={a}", 0)
    assert grp.rgx == f"{a}|"


@pytest.mark.parametrize(
    "spec",
    [
        # empty
        "",
        # no name
        ":fmt=08d",
        # argument given to flags
        "a:opt=stuff",
        "a:discard=stuff",
        # no argument given to format
        "a:fmt=",
        # properties specified twice
        "a:opt:fmt=02d:opt",
        "a:rgx=foo:rgx=bar",
        "a:opt:rgx=bar:opt:opt",
        # wrong
        "a:optional",
        "a:fmt",
    ],
)
def test_bad_definition(spec: str):
    """Test some obvious bad definitions."""
    with pytest.raises(GroupParseError):
        Group(spec, 0)


@pytest.mark.parametrize(
    "name,expected_rgx,expected_fmt",
    [
        ("I", r"(\d+)", "d"),
        ("Y", r"(\d{4})", "04d"),
        ("m", r"(\d\d)", "02d"),
        ("x", r"(\d{4}\d\d\d\d)", "08d"),
        ("X", r"(\d\d\d\d\d\d)", "06d"),
        ("F", r"(\d{4}-\d\d-\d\d)", "s"),
    ],
)
def test_some_default_names(name, expected_rgx, expected_fmt):
    """Test various default names."""
    assert_grp(name, expected_rgx, expected_fmt)


def test_default_overwrite():
    """Test if rgx and fmt overwrite correctly the defaults."""
    assert_grp("Y:rgx=foo", "(foo)", "04d")
    assert_grp("Y:rgx=foo:fmt=s", "(foo)", "s")
    assert_grp("Y:rgx=foo:fmt=s:opt:discard", "(foo)?", "s")
    assert_grp("Y:fmt=08d", "({})".format(Format("08d").generate_expression()), "08d")
    assert_grp("Y:bool=true:false:fmt=s", "(true|false)", "s")


def test_percent_rgx():
    assert_grp("foo:rgx=a-%x", r"(a-\d{4}\d\d\d\d)", "s")
    assert_grp("foo:rgx=%Y.%m.%d", r"(\d{4}.\d\d.\d\d)", "s")
    # escape the percent
    assert_grp("foo:rgx=%Y-100%%", r"(\d{4}-100%)", "s")

    with pytest.raises(KeyError):
        Group("foo:rgx=%e", 0)


@given(number=st.integers(), fmt=st_format_d)
def test_fix_value_int(number: int, fmt: str):
    g = Group(f"foo:fmt={fmt}", 0)
    g.fix_value(number)
    assert g.fixed_value == number
    assert g.fixed_string == re.escape(f"{{:{fmt}}}".format(number))


@given(a=st.integers(), b=st.integers())
def test_fix_value_consecutive(a: int, b: int):
    g = Group("foo:fmt=d", 0)
    g.fix_value(a)
    assert g.fixed_value == a
    g.unfix()
    assert g.fixed_value is None
    g.fix_value(b)
    assert g.fixed_value == b


@given(number=st.floats(allow_infinity=False, allow_nan=False), fmt=st_format_f)
def test_fix_value_float(number: float, fmt: str):
    g = Group(f"foo:fmt={fmt}", 0)
    g.fix_value(number)
    assert g.fixed_value == number
    assert g.fixed_string == re.escape(f"{{:{fmt}}}".format(number))


@given(s=st.text(), fmt=st_format_s)
def test_fix_value_string(s: str, fmt: str):
    g = Group(f"foo:fmt={fmt}", 0)
    g.fix_value(s)
    assert g.fixed_value == s
    assert g.fixed_string == s
    assert g.get_regex() == f"({s})"


def test_fix_value_bool():
    g = Group("foo:bool=opt1:opt2", 0)
    g.fix_value(True)
    assert g.fixed_string == "opt1"
    g.fix_value(False)
    assert g.fixed_string == "opt2"

    with pytest.raises(ValueError):
        g = Group("Y", 0)
        g.fix_value(True)


@given(elements=st.lists(st.integers(), min_size=1), fmt=st_format_d)
def test_fix_value_list(elements: list[int], fmt: str):
    g = Group(f"foo:fmt={fmt}", 0)
    g.fix_value(elements)
    formatted_elts = [f"{{:{fmt}}}".format(e) for e in elements]
    assert g.fixed_string == ("|".join(re.escape(e) for e in formatted_elts))

    g.fix_value(elements, for_regex=False)
    assert g.fixed_string == formatted_elts[0]

    with pytest.raises(ValueError):
        g.fix_value([])
