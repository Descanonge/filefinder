"""Test group features."""

import re

import pytest
from filefinder.format import Format
from filefinder.group import Group, GroupParseError
from hypothesis import example, given
from hypothesis import strategies as st
from test_format import format_d, format_float, no_dangerous


def assert_grp(spec: str, expected_rgx: str, expected_fmt: str):
    grp = Group(spec, 0)
    assert grp.rgx == expected_rgx
    assert grp.fmt.fmt == expected_fmt


# Strategies for generating group definitions
alphabet = st.characters(exclude_characters=["(", ")", ":", "\n"])


def del_pct(s: str) -> bool:
    return re.search("%[a-zA-Z]", s) is None


st_name = st.text(alphabet=alphabet, min_size=1)
st_rgx = (
    st.text(alphabet=alphabet, min_size=1).filter(del_pct).map(lambda s: f":rgx={s}")
)
st_fmt = format_float.filter(no_dangerous).map(lambda s: f":fmt={s}")


@st.composite
def st_bool_elts(draw) -> tuple[str, str]:
    a = draw(st.text(alphabet=alphabet, min_size=1).filter(del_pct))
    b = draw(st.text(alphabet=alphabet).filter(del_pct))
    return a, b


@st.composite
def st_bool(draw) -> str:
    a, b = draw(st_bool_elts())
    out = f":bool={a}"
    if b:
        out += f":{b}"
    return out


@st.composite
def group_definition(draw) -> tuple[str, dict]:
    name = draw(st_name)
    specs = dict(
        opt=st.just(":opt"),
        discard=st.just(":discard"),
        rgx=st_rgx,
        fmt=st_fmt,
        bool=st_bool(),
    )
    rand = draw(st.randoms())
    n_specs = rand.randint(0, len(specs))
    specs_chosen = {k: draw(specs[k]) for k in rand.sample(list(specs.keys()), n_specs)}
    definition = name + "".join(specs_chosen.values())
    specs_chosen["name"] = name
    return definition, specs_chosen


@given(input=group_definition())
def test_random_definitions(input: tuple[str, dict]):
    """Test definitions generated by hypothesis."""
    definition, specs = input
    g = Group(definition, 0)

    assert g.name == specs["name"]

    # Test flags
    assert g.optional == ("opt" in specs)
    assert g.discard == ("discard" in specs)

    # Test rgx, format, and bool
    if "rgx" in specs:
        assert f":rgx={g.rgx}" == specs["rgx"]
    if "fmt" in specs:
        assert f":fmt={g.fmt.fmt}" == specs["fmt"]


@given(ab=st_bool_elts())
@example(ab=("foo", ""))
def test_bool(ab):
    """Test bool spec generated by hypothesis."""
    a, b = ab
    grp = Group(f"name:bool={a}:{b}", 0)
    assert grp.rgx == f"{a}|{b}"

    grp = Group(f"name:bool={a}", 0)
    assert grp.rgx == f"{a}|"


@pytest.mark.parametrize(
    "spec",
    [
        # empty
        "",
        # no name
        ":fmt=08d",
        # argument given to flags
        "a:opt=stuff",
        "a:discard=stuff",
        # no argument given to format
        "a:fmt=",
        # properties specified twice
        "a:opt:fmt=02d:opt",
        "a:rgx=foo:rgx=bar",
        # wrong
        "a:optional",
        "a:fmt",
    ],
)
def test_bad_definition(spec: str):
    """Test some obvious bad definitions."""
    with pytest.raises(GroupParseError):
        Group(spec, 0)


@pytest.mark.parametrize(
    "name,expected_rgx,expected_fmt",
    [
        ("I", r"\d+", "d"),
        ("Y", r"\d{4}", "04d"),
        ("m", r"\d\d", "02d"),
        ("x", r"\d{4}\d\d\d\d", "08d"),
        ("X", r"\d\d\d\d\d\d", "06d"),
        ("F", r"\d{4}-\d\d-\d\d", "s"),
    ],
)
def test_some_default_names(name, expected_rgx, expected_fmt):
    """Test various default names."""
    assert_grp(name, expected_rgx, expected_fmt)


def test_default_overwrite():
    """Test if rgx and fmt overwrite correctly the defaults."""
    assert_grp("Y:rgx=foo", "foo", "04d")
    assert_grp("Y:rgx=foo:fmt=s", "foo", "s")
    assert_grp("Y:rgx=foo:fmt=s:opt:discard", "foo", "s")
    assert_grp("Y:fmt=08d", Format("08d").generate_expression(), "08d")
    assert_grp("Y:bool=true:false:fmt=s", "true|false", "s")


def test_percent_rgx():
    assert_grp("foo:rgx=a-%x", r"a-\d{4}\d\d\d\d", "s")
    assert_grp("foo:rgx=%Y.%m.%d", r"\d{4}.\d\d.\d\d", "s")
    # escape the percent
    assert_grp("foo:rgx=%Y-100%%", r"\d{4}-100%", "s")


@given(number=st.integers(), fmt=format_d().filter(no_dangerous))
def test_fix_value_int(number: int, fmt: str):
    g = Group(f"foo:fmt={fmt}", 0)
    g.fix_value(number)
    assert g.fixed_value == number
    assert g.fixed_string == re.escape(f"{{:{fmt}}}".format(number))


@given(
    number=st.floats(allow_infinity=False, allow_nan=False),
    fmt=format_float.filter(no_dangerous),
)
def test_fix_value_float(number: float, fmt: str):
    g = Group(f"foo:fmt={fmt}", 0)
    g.fix_value(number)
    assert g.fixed_value == number
    assert g.fixed_string == re.escape(f"{{:{fmt}}}".format(number))


@given(s=st.text(), fmt=format_float.filter(no_dangerous))
def test_fix_value_string(s: str, fmt: str):
    g = Group(f"foo:fmt={fmt}", 0)
    g.fix_value(s)
    assert g.fixed_value == s
    assert g.fixed_string == s


def test_fix_value_bool():
    g = Group("foo:bool=opt1:opt2", 0)
    g.fix_value(True)
    assert g.fixed_string == "opt1"
    g.fix_value(False)
    assert g.fixed_string == "opt2"


@given(
    elements=st.lists(st.integers(), min_size=1), fmt=format_float.filter(no_dangerous)
)
def test_fix_value_list(elements: list[int], fmt: str):
    g = Group(f"foo:fmt={fmt}", 0)
    g.fix_value(elements)
    formatted_elts = [f"{{:{fmt}}}".format(e) for e in elements]
    assert g.fixed_string == ("|".join(re.escape(e) for e in formatted_elts))

    with pytest.raises(ValueError):
        g.fix_value([])
